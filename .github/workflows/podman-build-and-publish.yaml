name: Reusable Podman Build and Publish

on:
  workflow_call:
    inputs:
      registry:
        description: 'Container registry URL'
        type: string
        default: 'ghcr.io'
      registry_path:
        description: 'Path within registry (e.g. organization name)'
        type: string
        default: 'statens-pensjonskasse'
      image_name:
        description: 'Container image name'
        type: string
        required: true
      image_tag:
        description: 'Container image tag'
        type: string
        required: true
      containerfile:
        description: 'Path to the Containerfile/Dockerfile'
        type: string
        required: true
      build_arg_file:
        description: 'Path to build argument file'
        type: string
        required: false
      build_args:
        description: 'List of build arguments in KEY=VALUE format (comma-separated)'
        type: string
        required: false
      platforms:
        description: 'Comma-separated list of platforms to build for'
        type: string
        default: 'linux/amd64'
      sbom:
        description: 'Generate Software Bill of Materials. Midlertidig false fordi podman på ubuntu-latest støtter ikke --sbom (major-versjon 4 som er for gammel)'
        type: boolean
        default: false
      description:
        description: 'Description for the image'
        type: string
        required: false
      runner_tag:
        description: 'Runner to build on. Default is ubuntu-latest (cloud)'
        type: string
        required: false
        default: ubuntu-latest
    secrets:
      registry_token:
        description: 'Token for registry authentication'
        required: false

jobs:
  build-and-publish:
    runs-on: ${{ inputs.runner_tag }}
    permissions:
      contents: read
      packages: write
    env:
      TZ: Europe/Oslo

    steps:
      - name: Checkout repository
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 #v4.2.2
        with:
          fetch-depth: 0

      - name: Set up QEMU for multi-arch builds
        uses: docker/setup-qemu-action@29109295f81e9208d7d86ff1c6c12d2833863392 #v3.6.0

      - name: Set up full image reference
        run: |
          echo "IMAGE_REFERENCE=${{ inputs.registry }}/${{ inputs.registry_path }}/${{ inputs.image_name }}:${{ inputs.image_tag }}" >> $GITHUB_ENV
          echo "CACHE_IMAGE=${{ inputs.registry }}/${{ inputs.registry_path }}/${{ inputs.image_name }}:cache" >> $GITHUB_ENV

      - name: Login to Container Registry
        run: |
          # Use provided token or fallback to github.token
          echo "${{ secrets.registry_token || github.token }}" | podman login ${{ inputs.registry }} -u ${{ github.actor }} --password-stdin

      - name: Pull previous image for layer caching
        run: |
          # Try to pull the previous version of the image to use as cache
          podman pull ${{ env.IMAGE_REFERENCE }} || echo "No previous image found, building from scratch"
          
          # Also try to pull the cache tag if it exists
          podman pull ${{ env.CACHE_IMAGE }} || echo "No cache image found"

      - name: Build container image
        run: |
          podman image rm ${{ env.IMAGE_REFERENCE }} || true
          podman manifest rm ${{ env.IMAGE_REFERENCE }} || true
          podman manifest create ${{ env.IMAGE_REFERENCE }}

          BUILD_COMMAND="podman build \
            --file ${{ inputs.containerfile }} \
            --manifest ${{ env.IMAGE_REFERENCE }} \
            --platform ${{ inputs.platforms }} \
            --layers \
            --annotation 'org.opencontainers.image.revision=${{ github.sha }}' \
            --annotation 'org.opencontainers.image.created=$(date -u +%Y-%m-%dT%H:%M:%SZ)' \
            --annotation 'org.opencontainers.image.url=${{ github.server_url }}/${{ github.repository }}'"

          if [ -n "${{ inputs.description }}" ]; then
            BUILD_COMMAND="${BUILD_COMMAND} --annotation 'org.opencontainers.image.description=${{ inputs.description }}'"
          fi

          # Add build arg file if provided
          if [ -n "${{ inputs.build_arg_file }}" ]; then
            BUILD_COMMAND="${BUILD_COMMAND} --build-arg-file ${{ inputs.build_arg_file }}"
          fi

          # Add individual build args if provided
          if [ -n "${{ inputs.build_args }}" ]; then
            IFS=',' read -ra ARGS <<< "${{ inputs.build_args }}"
            for arg in "${ARGS[@]}"; do
              BUILD_COMMAND="${BUILD_COMMAND} --build-arg ${arg}"
            done
          fi

          # Add SBOM generation if enabled
          if [ "${{ inputs.sbom }}" == "true" ]; then
            BUILD_COMMAND="${BUILD_COMMAND} --sbom=true"
          fi

          echo "${BUILD_COMMAND}"
          eval "${BUILD_COMMAND}"

      - name: Push image to Container Registry only on main branch
        if: github.ref == 'refs/heads/main'
        run: |
          podman manifest push ${{ env.IMAGE_REFERENCE }}
          
          # Also push a cache tag for future builds
          podman tag ${{ env.IMAGE_REFERENCE }} ${{ env.CACHE_IMAGE }}
          podman push ${{ env.CACHE_IMAGE }}
